package main

type Header []map[string]string
type Header struct {
	Key   string
	Value string
}

type errorWriter struct {
	io.Writer
	err error
}

func (e *errorWriter) write(buf []byte) (int, error) {
	if e.err != nil {
		return 0, e.err
	}
	var n int
	fmt.Println("int::", n)
	n, e.err = e.Writer.Write(buf)
	return n, nil
}
func (e *errorWriter) Read() {
	fmt.Println("read")
}

type Status struct {
	Code   int
	Reason string
}

func indexHandler(w http.ResponseWriter, req *http.Request) {
	status := Status{Code: 110, Reason: "测试"}
var header Header
header = make([]map[string]string, 0)
header = append(header, map[string]string{"Key": "nihao", "Value": "测试"})
header = append(header, map[string]string{"Key": "123", "Value": "345"})
fmt.Println("header %v", header)
fmt.Println("status %v", status.Code)
for _, val := range header {
	fmt.Println(" key % v", val["Key"], val["Value"])
}
%+v
	var header []Header
	header = append(header, Header{Key: "1", Value: "01"})
	header = append(header, Header{Key: "2", Value: "02"})
	header = append(header, Header{Key: "3", Value: "03"})
	WriteResponse(w, status, header, req.Body)
}

func WriteResponse(w io.Writer, sd Status, headers []Header, body io.Reader) error {
	ew := &errorWriter{Writer: w}
	fmt.Fprintf(ew, "HTTP/1.1 %d %s \r\n", sd.Code, sd.Reason)
	for _, h := range headers {
		fmt.Fprintf(ew, "%s:%s\r\n", h.Key, h.Value)
	}
	fmt.Fprintf(ew, "\r\n")
	return ew.err
}
func main() {

	http.HandleFunc("/", indexHandler)
	log.Fatal(http.ListenAndServe(":8080", nil))
}
